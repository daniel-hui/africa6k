#####################################################################
# Run projection Admixture, from unrelateds to relateds, for K=2 to 12
# This is the same as the 1M^5M^EUR.all dataset except filtered to only the Afr samples with at least one trait measurement.
# The CTA.Afr_Eur.all is first pruned to remove relateds --> CTA.Afr_Eur2.ur, with the relateds in CTA.Afr_Eur2.rl
# Admixture is first run on the unrelateds. Because we need to use the .P files, which is not combined using CLUMPP, we only use one replicate.
# Then Admixture is run in projection mode on the CTA.Afr_Eur2.rl data

# Admixture on unrelateds and unlinked sites (the "reference" data set)
nohup ./runADX.sh <reference.bed> <K1> <K2> <replicate indices string, e.g. to run 3 replicates per K, could use "1 2 3"> <top output directory to make/populate>  >> <logfile> &

# Project the entire dataset onto the unrelateds .P files
nohup ./runADX_Proj.sh <data_to_project.bed> <reference.bed> <K1> <K2> <replicate indices string> <reference output directory> <new output directory> <name to give new output files> >> <logfile> &

# Run CLUMPP
nohup ./runCLUMPP.sh <output directory> <K1> <K2> <replicate indices string> <plink .fam file> <clumpp paramfile template> >> <logfile> &

# Align a .Q file to a reference .Q file. Assumes that these two .Q files have the same K value
python Align_Adx_to_Ref.py --ref <reference name; assumes <ref>.Q exists> --in <target name; assumes <in>.Q and <in>.P exist> --out <output name; writes <out>.Q and <out>.P, depending on the mode> --r <alignment score exponent; |q_ref-q_in|^r>

# Match the ADMIXTURE components among N ADMIXTURE .Q files
python Match_Adx_for_series_of_K.py --in <input list of .Q files> --r <alignment score exponent> --out <output file>
# example:
python Match_Adx_for_series_of_K.py --in match_adx_example --r 3 --out match_adx_out